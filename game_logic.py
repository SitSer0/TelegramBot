"""
–ö–ª–∞—Å—Å Game –¥–ª—è –∏–≥—Ä—ã '4 –≤ —Ä—è–¥'.

–≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã '4 –≤ —Ä—è–¥'. –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≤–∏–¥–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
–ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ "–±—Ä–æ—Å–∞—é—Ç" —Ñ–∏—à–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü—ã, —Å—Ç—Ä–µ–º—è—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ñ–∏—à–µ–∫ —Å–≤–æ–µ–≥–æ —Ü–≤–µ—Ç–∞.

"""

class Game:
    def __init__(self, rows=6, cols=7, red='üî¥', yellow='üü°'):
        self.rows = rows
        self.cols = cols
        self.board = [[' ' for _ in range(cols)] for _ in range(rows)]
        self.current_player = red

    def drop_piece(self, col):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏—à–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω.
        :param col:
        :return:
        """
        if self.board[0][col] != ' ':
            return False
        for row in range(self.rows - 1, -1, -1):
            if self.board[row][col] == ' ':
                self.board[row][col] = self.current_player
                break
        return True

    def switch_player(self):
        """
        –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ.
        :return:
        """
        print(self.current_player)
        self.current_player = 'üü°' if self.current_player == 'üî¥' else 'üî¥'

    def print_board(self):
        """
        –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å.
        :return:
        """
        for row in self.board:
            print('|' + '|'.join(row) + '|')
        print('+---' * self.cols + '+')


    def check_winner(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Ä—è–¥.
        :return:
        """
        for row in range(self.rows):
            for col in range(self.cols - 3):
                if self.board[row][col] == self.current_player and all(self.board[row][col + i] == self.current_player for i in range(1, 4)):
                    return True
        for row in range(self.rows - 3):
            for col in range(self.cols):
                if self.board[row][col] == self.current_player and all(self.board[row + i][col] == self.current_player for i in range(1, 4)):
                    return True
        for row in range(self.rows - 3):
            for col in range(self.cols - 3):
                if self.board[row][col] == self.current_player and all(self.board[row + i][col + i] == self.current_player for i in range(1, 4)):
                    return True
                if self.board[row + 3][col] == self.current_player and all(self.board[row + 3 - i][col + i] == self.current_player for i in range(1, 4)):
                    return True
        return False

    def is_full(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
        :return:
        """
        return all(self.board[0][col] != ' ' for col in range(self.cols))